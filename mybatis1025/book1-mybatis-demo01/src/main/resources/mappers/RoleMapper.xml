<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.book.study.mapper.RoleMapper">


    <!--
        二级缓存会有如下效果：
        映射语句文件中的所有SELECT语句将会被缓存
        映射语句文件中的所有INSERT、UPDATE、DELTE语句会刷新缓存
        缓存会使用Least Recently Used(LRU,最近最少使用的)算法来收回
        根据时间表(如no Flush Inteerval,没有刷新间隔)，缓存不会以任何时间顺序来刷新
        缓存会存储集合或对象(无论查询方法返回什么类型的值)的1024个引用。
        缓存会被视为read/write（可读/可写）的，意味着对象检索不是共享的，
        而且可以安全地调用者修改，而不干扰其他调用者或线程所做的潜在修改。

        evication(收回策略)：
            LRU(最近最少使用的):移除最长时间不被使用的对象，这是默认值
            FIFO(先进先出)：按对象进入缓存的顺序来移除他们。
            SOFT(软引用): 移除基于垃圾回收器
            WEAK(弱引用)：更积极地移除基于垃圾收集器状态和弱引用规则的对象

        flushInterval(刷新间隔)：可以被设置为任意的正整数，而且他们代一个合理的毫秒形式的时间段。
            默认情况下，既没有刷新间隔，缓存仅仅在调用语句时刷新
        readOnly（只读）：属性可以被设置为true或false。只读的缓存会给所有调用者返回缓存对象的相同实例，因此这些对象不能被修改，这提供了很重要的性能优势。
        可以读写的缓存会通过序列化返回焕春对象的拷贝，这种方式会慢一些，但是安全写，因此默认是false
    -->
<!--    <cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>



    <resultMap id="roleMap" type="com.mybatis.book.study.model.SysRole">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="enabled" column="enabled"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <!--        <association property="createInfo">-->
        <!--            <result property="createBy" column="create_by"/>-->
        <!--            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>-->
        <!--        </association>-->

    </resultMap>


    <!--    带有权限列表的resultMap-->
    <resultMap id="rolePrivilegeListMap" extends="roleMap" type="com.mybatis.book.study.model.SysRole">
        <collection property="privilegeList" columnPrefix="privilege_"
                    resultMap="com.mybatis.book.study.mapper.PrivilegeMapper.privilegeMap"/>
    </resultMap>

    <resultMap id="rolePrivilegeListMapSelect" extends="roleMap" type="com.mybatis.book.study.model.SysRole">
        <collection property="privilegeList" fetchType="lazy" column="{roleId=id}"
                    select="com.mybatis.book.study.mapper.PrivilegeMapper.selectPrivilegeByRoleId"/>
    </resultMap>

    <resultMap id="rolePrivilegeListMapChoose" type="com.mybatis.book.study.model.SysRole">
        <discriminator column="enabled" javaType="int">
            <case value="1" resultMap="rolePrivilegeListMapSelect"></case>
            <case value="0" resultMap="roleMap"/>
        </discriminator>
    </resultMap>

    <select id="selectAllRoleAndPrivileges" resultMap="rolePrivilegeListMap">
        select
        r.id,
        r.role_name,
        r.enabled,
        r.create_by,
        r.create_time,
        p.id privilege_id,
        p.privilege_name privilege_privilege_name,
        p.privilege_url privilege_privilege_url

        from sys_role r
        inner join sys_role_privilege rp on rp.role_id = r.id
        inner join sys_privilege p on p.id=rp.privilege_id
    </select>


    <select id="selectRoleById" resultMap="roleMap">
        select * from sys_role where id = #{id}
    </select>


    <select id="selectRoleByUserId" resultMap="rolePrivilegeListMapSelect">
        select
        r.id,
        r.role_name,
        r.enabled,
        r.create_by,
        r.create_time
        from sys_role r
        inner join sys_user_role ur on ur.role_id = r.id
        where ur.user_id = #{userId}
    </select>


    <select id="selectRoleUserIdChoose" resultMap="rolePrivilegeListMapChoose">
        select
        r.id,
        r.role_name,
        r.enabled,
        r.create_by,
        r.create_time
        from sys_role r
        inner join sys_user_role ur on ur.role_id = r.id
        where ur.user_id = #{userId}
    </select>


</mapper>
