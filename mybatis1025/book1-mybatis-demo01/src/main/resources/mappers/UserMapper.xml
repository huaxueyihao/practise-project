<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.book.study.mapper.UserMapper">


    <resultMap id="userMap" type="com.mybatis.book.study.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="userRoleMap" type="com.mybatis.book.study.model.SysUser" extends="userMap">
        <!--        extends 继承userMap-->

        <!--        <id property="id" column="id"/>-->
        <!--        <result property="userName" column="user_name"/>-->
        <!--        <result property="userPassword" column="user_password"/>-->
        <!--        <result property="userEmail" column="user_email"/>-->
        <!--        <result property="userInfo" column="user_info"/>-->
        <!--        <result property="headImg" column="head_img" jdbcType="BLOB"/>-->
        <!--        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>-->

        <!--        role相关属性-->
        <!--        <result property="role.id" column="role_id"/>-->
        <!--        <result property="role.roleName" column="role_name"/>-->
        <!--        <result property="role.enabled" column="enabled"/>-->
        <!--        <result property="role.createBy" column="create_by"/>-->
        <!--        <result property="role.createTime" column="role_create_time" jdbcType="TIMESTAMP"/>-->


        <!--
            property：对应实体类中的属性名，必填
            javaType：属性对应的Java类型
            resultMap：可以直接使用现有的resultMap，而不需要在这里配置
            columnPrefix：查询列的前缀，配置前缀后，在子标签配置result的column可以省略前缀

        -->
        <!--        <association property="role" columnPrefix="role_" javaType="com.mybatis.book.study.model.SysRole">-->
        <!--            <result property="id" column="id"/>-->
        <!--            <result property="roleName" column="role_name"/>-->
        <!--            <result property="enabled" column="enabled"/>-->
        <!--            <result property="createBy" column="create_by"/>-->
        <!--            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>-->
        <!--        </association>-->

        <association property="role" columnPrefix="role_" resultMap="com.mybatis.book.study.mapper.RoleMapper.roleMap"/>

    </resultMap>


    <resultMap id="userRoleMapSelect" type="com.mybatis.book.study.model.SysUser" extends="userMap">
        <association property="role" fetchType="lazy" column="{id=role_id}"
                     select="com.mybatis.book.study.mapper.RoleMapper.selectRoleById"></association>
    </resultMap>

    <resultMap id="userRoleListMap" extends="userMap" type="com.mybatis.book.study.model.SysUser">
        <!--        <id property="id" column="id"/>-->
        <!--        <result property="userName" column="user_name"/>-->
        <!--        <result property="userPassword" column="user_password"/>-->
        <!--        <result property="userEmail" column="user_email"/>-->
        <!--        <result property="userInfo" column="user_info"/>-->
        <!--        <result property="headImg" column="head_img" jdbcType="BLOB"/>-->
        <!--        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>-->

        <!--        <collection property="roleList" columnPrefix="role_" javaType="com.mybatis.book.study.model.SysRole">-->
        <!--            <id property="id" column="id"/>-->
        <!--            <result property="roleName" column="role_name"/>-->
        <!--            <result property="enabled" column="enabled"/>-->
        <!--            <result property="createBy" column="create_by"/>-->
        <!--            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>-->
        <!--        </collection>-->

        <collection property="roleList" columnPrefix="role_"
                    resultMap="com.mybatis.book.study.mapper.RoleMapper.rolePrivilegeListMap"/>

    </resultMap>


    <resultMap id="userRoleListMapSelect" extends="userMap" type="com.mybatis.book.study.model.SysUser">
        <collection property="roleList" fetchType="lazy"
                    select="com.mybatis.book.study.mapper.RoleMapper.selectRoleByUserId"
                    column="{userId=id}"/>
    </resultMap>


    <select id="selectById" resultMap="userMap">
        select * from sys_user where id = #{id}
    </select>


    <!--    selectById和selectAll的区别：selectById中使用了resultMap来设置结果映射，
            而selectAll中则通过resultType直接指定了返回结果的类型。可以发现，如果使用resultType
            来设置返回结果的类型，需要在SQL中为所有列名和属性名不一致的类设置别名，通过哟设置别名使
            最终的查询结果列和resultType指定对象的属性名保持一致，进而实现自动映射-->
    <select id="selectAll" resultType="com.mybatis.book.study.model.SysUser">
        select id,
            user_name userName,
            user_password userPassword,
            user_email userEmail,
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
    </select>

    <select id="selectRolesByUserId" resultType="com.mybatis.book.study.model.SysRole">
        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId}
    </select>

    <select id="selectRolesByUserIdAndRoleEnabled" resultType="com.mybatis.book.study.model.SysRole">
        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId} and r.enabled = #{enabled}
    </select>


    <select id="selectRolesByUserAndRole" resultType="com.mybatis.book.study.model.SysRole">
        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{user.id} and r.enabled = #{role.enabled}
    </select>


    <select id="selectRolesByUserIdExtend" resultType="com.mybatis.book.study.model.SysRoleExtend">
        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime,
            u.user_name userName
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId}
    </select>

    <select id="selectRolesByUserIdWithSysUser" resultType="com.mybatis.book.study.model.SysRole">
        select
            r.id,
            r.role_name roleName,
            r.enabled,
            r.create_by createBy,
            r.create_time createTime,
            u.user_name as "user.userName",
            u.user_email as "user.userEmail"
        from sys_user u
        inner join sys_user_role ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{userId}
    </select>


    <!--
        insert标签属性：
        id:命名空间中的唯一标识，
        parameterType:即将传入的语句的参数的完全限定类名或别名。这个属性时可选的
        flushCache:默认值是true，任何时候只要语句被调用，都会清空一级缓存和二级缓存
        timeout：设置在抛出异常之前，驱动程序等待数据库返回请求结果的秒数
        statementType：对于STATEMENT，PREPARED、CALLABLE，Mybatis会分表使用对应的Statement，PreparedStatement、CallableStatement，默认是PREPARED
        useGeneratedKeys：默认值为false，如果设置为true，Mybatis会使用JDBC的getGeneratedKeys方法来取出由数据库内部生成的主键，
        keyProperty：Mybatis通过getGeneratedKeys获取主键值后将要复制属性名。如果希望得到多个数据库自动生成的列，属性值也可以是以逗号分隔的属性名称列表
        keyColumn：仅对INSERT和UPDATE有用。通过生成的键值设置表中的列名，这个设置仅在某些数据库（PostgreSQL）中是必须的，当主键列不是表中的第一列时需要设置
        databaseId：如果配置了databaseIdProvider，Mybatis会加载所有的不带dataBaseId的或匹配当前databaseId的语句，如果同时存在带databaseId和不带databaseId的语句。

        说明：BLOB对应的类型是ByteArrayInputStream，就是二级制数据流；date，time，datetime对应的JDBC类型分别为DATE(年月日)、TIME(时分秒)、TIMESTAMP(年月日时分秒)

    -->
    <insert id="insert">
        insert into sys_user (id,user_name,user_password,user_email,user_info,head_img,create_time)
         values (
            #{id},#{userName} ,#{userPassword} ,#{userEmail} ,#{userInfo} ,#{headImg,jdbcType=BLOB},
            #{createTime,jdbcType=TIMESTAMP}
         );
    </insert>

    <!--
        useGeneratedKeys设置为tre后，mybatis会使用JDBC的getGeneratedKeys方法来取出数据库内部生成的主键
        获得主键后将其复制给keyProperty配置的id属性。当需要设置多个属性时，使用逗号隔开。
        通常还需要设置keyColum属性，按顺序指定数据库的列，这里列的值会和keyProperty配置的属性一一对应
    -->
    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user (user_name,user_password,user_email,user_info,head_img,create_time)
         values (
            #{userName} ,#{userPassword} ,#{userEmail} ,#{userInfo} ,#{headImg,jdbcType=BLOB},
            #{createTime,jdbcType=TIMESTAMP}
         );
    </insert>


    <!--

    -->
    <insert id="insert3">
        insert into sys_user (user_name,user_password,user_email,user_info,head_img,create_time)
        values (
        #{userName} ,#{userPassword} ,#{userEmail} ,#{userInfo} ,#{headImg,jdbcType=BLOB},
        #{createTime,jdbcType=TIMESTAMP}
        );

        <!--
            order 属性的设置和使用的数据库有关。在MySQL数据库中，order属性设置的值是AFTER，因为当前记录的主键值在
            insert语句执行成功后才能获取到，在Oracle数据库中，order值设置为BEFORE，Oracle中更需要先从序列获取值，
            然后将值作为主键插入到数据库中
        -->
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>

    <update id="updateById">
        update sys_user
        set user_name = #{userName} ,
            user_password = #{userPassword} ,
            user_email = #{userEmail} ,
            user_info = #{userInfo} ,
            head_img = #{headImg,jdbcType=BLOB},
            create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id}
    </update>

    <delete id="deleteById">
        delete from sys_user where id = #{id}
    </delete>


    <select id="selectByUser" databaseId="mysql" resultType="com.mybatis.book.study.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        <where>
            <if test="userName !=null and userName != ''">
                and user_name like concat('%',#{userName},'%')
            </if>
            <if test="userEmail != null and userEmail != ''">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>


    <select id="selectByUser" databaseId="oracle" resultType="com.mybatis.book.study.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        <where>
            <if test="userName !=null and userName != ''">
                and user_name like '%'||#{userName}||'%'
            </if>
            <if test="userEmail != null and userEmail != ''">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>


    <!--    这种使用方式避免了 重复-->
    <select id="selectByUser" resultType="com.mybatis.book.study.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        <where>
            <if test="userName !=null and userName != ''">
                <if test="_databaseId == 'mysql'">
                    and user_name like concat('%',#{userName},'%')
                </if>
                <if test="_databaseId == 'oracle'">
                    and user_name like '%'||#{userName}||'%'
                </if>

            </if>
            <if test="userEmail != null and userEmail != ''">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>


    <!--    注意逗号和id=#{id}:全部为空时，至少id不是空
            <set>标签解决而了逗号问题，不必担心多了个逗号
    -->
    <update id="updateByIdSelective">
        update sys_user
        <set>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="headImg != null">
                head_img = #{headImg},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            id = #{id},
        </set>
        where id = #{id}
    </update>


    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user (
        user_name,user_password,
        <if test="userEmail != null and userEmail != ''">
            user_email,
        </if>
        user_info,head_img,create_time)
        values (
        #{userName} ,#{userPassword} ,
        <if test="userEmail != null and userEmail != ''">
            #{userEmail} ,
        </if>

        #{userInfo} ,#{headImg,jdbcType=BLOB},
        #{createTime,jdbcType=TIMESTAMP}
        );
    </insert>


    <select id="selectByIdOrUserName" resultType="com.mybatis.book.study.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where 1 = 1
        <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test="userName != null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>
    </select>


    <!--
        foreach属性：
        collection：必填，值为要迭代循环的属性名。
        item：变量名，值为从迭代对象中取出的每一个值
        index：索引的属性名
        open：真个循环内容开头的字符串。
        close：整个循环内容结尾的字符串
        separator：每次循环的分隔符
    -->
    <select id="selectByIdList" resultType="com.mybatis.book.study.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where id in
        <foreach collection="list" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>
    </select>

    <insert id="insertList" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user (
        user_name,user_password,user_email,
        user_info,head_img,create_time
        ) values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userName,jdbcType=VARCHAR} ,
            #{user.userPassword} ,
            #{user.userEmail} ,
            #{user.userInfo,jdbcType=VARCHAR} ,
            #{user.headImg,jdbcType=BLOB} ,
            #{user.createTime,jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

    <!--
        没有添加@Param注解指定参数名，则默认是_parameter
    -->
    <update id="updateByMap">
        update sys_user
        set
        <foreach collection="_parameter" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        where id = #{id}
    </update>


    <select id="selectUserAndRoleById" resultType="com.mybatis.book.study.model.SysUser">
        select
        u.id,
        u.user_name userName,
        u.user_password userPassword,
        u.user_email userEmail,
        u.user_info userInfo,
        u.head_img headImg,
        u.create_time createTime,
        r.id "role.id",
        r.role_name "role.roleName",
        r.enabled "role.enabled",
        r.create_by "role.createBy",
        r.create_time "role.createTime"
        from sys_user u
        inner join sys_user_role  ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>


    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
        select
        u.id,
        u.user_name userName,
        u.user_password userPassword,
        u.user_email userEmail,
        u.user_info userInfo,
        u.head_img headImg,
        u.create_time createTime,
        r.id role_id,
        r.role_name ,
        r.enabled ,
        r.create_by,
        r.create_time role_create_time
        from sys_user u
        inner join sys_user_role  ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>

    <!--
        userRoleMap: association标签 配置columnPrefix="role_"前缀，所以列别名需要加role_前缀
    -->
    <select id="selectUserAndRoleById3" resultMap="userRoleMap">
        select
        u.id,
        u.user_name userName,
        u.user_password userPassword,
        u.user_email userEmail,
        u.user_info userInfo,
        u.head_img headImg,
        u.create_time createTime,
        r.id role_id,
        r.role_name role_role_name,
        r.enabled role_enabled,
        r.create_by role_create_by,
        r.create_time role_create_time
        from sys_user u
        inner join sys_user_role  ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        where u.id = #{id}
    </select>


    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
        select
        u.id,
        u.user_name userName,
        u.user_password userPassword,
        u.user_email userEmail,
        u.user_info userInfo,
        u.head_img headImg,
        u.create_time createTime,
        ur.role_id
        from sys_user u
        inner join sys_user_role  ur on u.id = ur.user_id
        where u.id = #{id}
    </select>


    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
        select
        u.id,
        u.user_name ,
        u.user_password ,
        u.user_email ,
        u.user_info ,
        u.head_img ,
        u.create_time ,
        r.id role_id,
        r.role_name role_role_name,
        r.enabled role_enabled,
        r.create_by role_create_by,
        r.create_time role_create_time
        from sys_user u
        inner join sys_user_role  ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
    </select>


    <select id="selectAllUserAndRolesAndPrivileges" resultMap="userRoleListMap">
        select
        u.id,
        u.user_name ,
        u.user_password ,
        u.user_email ,
        u.user_info ,
        u.head_img ,
        u.create_time ,
        r.id role_id,
        r.role_name role_role_name,
        r.enabled role_enabled,
        r.create_by role_create_by,
        r.create_time role_create_time,
        p.id role_privilege_id,
        p.privilege_name role_privilege_privilege_name,
        p.privilege_url role_privilege_privilege_url
        from sys_user u
        inner join sys_user_role  ur on u.id = ur.user_id
        inner join sys_role r on ur.role_id = r.id
        inner join sys_role_privilege rp on rp.role_id = r.id
        inner join sys_privilege p on p.id = rp.privilege_id
    </select>


    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
        select
        u.id,
        u.user_name,
        u.user_password,
        u.user_email,
        u.user_info,
        u.head_img,
        u.create_time
        from sys_user u
        where u.id = #{id}
    </select>


    <!--
        selectUserById:在使用select标签调用存储过程时，由于存储过程不支持MyBatis的二级缓存(后面章节会介绍)，
        因此为了避免缓存配置出错，直接将select标签的useCache属性设置为false。

        mode: 可选值IN, OUT, INOUT 三种。入参使用IN，出餐使用OUT，输入输出INOUT



    -->
    <select id="selectUserById" statementType="CALLABLE" useCache="false">
        { call select_user_by_id (
            #{id,mode=IN},
            #{userName,mode=OUT,jdbcType=VARCHAR},
            #{userPassword,mode=OUT,jdbcType=VARCHAR},
            #{userEmail,mode=OUT,jdbcType=VARCHAR},
            #{userInfo,mode=OUT,jdbcType=VARCHAR},
            #{headImg,mode=OUT,jdbcType=BLOB,javaType=byte[]},
            #{createTime,mode=OUT,jdbcType=TIMESTAMP}
            )
        }
    </select>

    <select id="selectUserPage" statementType="CALLABLE" useCache="false" resultMap="userMap">
        {call select_user_page (
            #{userName,mode=IN},
            #{offset,mode=IN},
            #{limit,mode=IN},
            #{total,mode=OUT,jdbcType=BIGINT}
        )}
    </select>


    <select id="insertUserAndRoles" statementType="CALLABLE">
        {call insert_user_and_roles(
            #{user.id,mode=OUT,jdbcType=BIGINT},
            #{user.userName,mode=IN},
            #{user.userPassword,mode=IN},
            #{user.userEmail,mode=IN},
            #{user.userInfo,mode=IN},
            #{user.headImg,mode=IN,jdbcType=BLOB},
            #{user.createTime,mode=OUT,jdbcType=TIMESTAMP},
            #{roleIds,mode=IN}
        )}
    </select>

    <delete id="deleteUserById" statementType="CALLABLE">
        {call delete_user_by_id (
            #{id,mode=IN}
        )}
    </delete>


</mapper>

